stages:
  - build
  - package
  - cluster
  - deploy

before_script:
  - export CI_COMMIT_SHA_SHORT=$(echo ${CI_COMMIT_SHA} | cut -c -8)
  - echo 'TEST'

compile:
  image: golang:1.8.1
  stage: build
  script:
    - ln -s /builds /go/src/github.com
    - cd /go/src/github.com/coredns/coredns
    - go get github.com/mholt/caddy
    - make -j $(getconf _NPROCESSORS_ONLN)
        -f Makefile.release build-linux
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - build/
      
build-e2e:
  stage: build
  variables:
    COREDNS_DOCKER_REGISTRY: "${CI_REGISTRY_IMAGE}"
    COREDNS_DOCKER_IMAGE_TAG: "${CI_COMMIT_REF_SLUG}.job.${CI_JOB_ID}"
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build -t "$CI_REGISTRY_IMAGE/coredns-e2e:$COREDNS_DOCKER_IMAGE_TAG" ./e2e/
    - docker push "$CI_REGISTRY_IMAGE/coredns-e2e:$COREDNS_DOCKER_IMAGE_TAG"

.tar:
  stage: package
  image: golang:1.8.1
  script:
    - make -f Makefile.release tar
  dependencies:
    - compile
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 4 weeks
    paths:
      - release/
      
container:
  stage: package
  image: docker:17.05.0
  script:
    - IMAGE_TAG=${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHA_SHORT}.${CI_JOB_ID}
    - cp build/Linux/coredns .
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$IMAGE_TAG" .
    - docker push "$CI_REGISTRY_IMAGE:$IMAGE_TAG"
    - echo export COREDNS_IMAGE=$CI_REGISTRY_IMAGE | tee release.env
    - echo export COREDNS_TAG=$IMAGE_TAG | tee -a release.env
    - cat release.env
  dependencies:
    - compile
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    expire_in: 5 weeks
    paths:
      - release.env

cluster:
  stage: cluster
  image: golang:1.8.1
  script:
    - apt update && apt install -y jq
    - cat release.env
    # - curl -X POST
    #     -F token=$CROSS_CLOUD_CI_JOB_TOKEN
    #     -F ref=ci-stable-v0.2.0
    #     -F "variables[AWS_CLOUD]=aws"
    #     https://gitlab.cncf.ci/api/v4/projects/2/trigger/pipeline
    - echo FIXME, we are sleeping but we need to watch the gitlab API, to see when the Job has Finished
    - PROJECT_PIPELINE=$(curl -X POST
         -F token=$CROSS_CLOUD_CI_JOB_TOKEN
         -F ref=ci-stable-v0.2.0
         -F "variables[AWS_CLOUD]=aws"
         https://gitlab.cncf.ci/api/v4/projects/2/trigger/pipeline | jq '.id')
    - sleep 120
    - echo $PROJECT_PIPELINE
    - PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" 'https://gitlab.cncf.ci/api/v4/projects/2/pipelines/${PROJECT_PIPELINE}/jobs?scope=success' | jq '.[] | select(.name=="aws_k8s_deploy") | .id' || sleep 100000)
    - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
    - curl -s -o aws-kubeconfig -L "$BASE_URL//cncf/cross-cloud/builds/artifacts/ci-stable-v0.2.0/raw/data/aws-ci-stable-v0-2-0/kubeconfig?job=aws_k8s_deploy"

  dependencies:
    - container
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    expire_in: 5 weeks
    paths:
      - aws-kubeconfig

deploy:
  stage: deploy
  image: debian:latest
  script:
    - echo TRIGGER CROSS-PROJECT
  dependencies:
    - cluster
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    expire_in: 5 weeks
    paths:
      - release.env
